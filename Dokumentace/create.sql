-- MySQL Script generated by MySQL Workbench
-- Wed Nov 11 12:57:15 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS = @@UNIQUE_CHECKS, UNIQUE_CHECKS = 0;
SET @OLD_FOREIGN_KEY_CHECKS = @@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS = 0;
SET @OLD_SQL_MODE = @@SQL_MODE, SQL_MODE =
        'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema blog
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema blog
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `blog` DEFAULT CHARACTER SET utf8;
USE `blog`;

-- -----------------------------------------------------
-- Table `blog`.`role`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blog`.`role`;

CREATE TABLE IF NOT EXISTS `blog`.`role`
(
    `role_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
    `name`    VARCHAR(45)  NOT NULL,
    PRIMARY KEY (`role_id`),
    UNIQUE INDEX `name_UNIQUE` (`name` ASC)
)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blog`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blog`.`user`;

CREATE TABLE IF NOT EXISTS `blog`.`user`
(
    `user_id`   INT UNSIGNED NOT NULL AUTO_INCREMENT,
    `username`  VARCHAR(45)  NOT NULL,
    `firstName` VARCHAR(45)  NOT NULL,
    `lastName`  VARCHAR(45)  NOT NULL,
    `email`     VARCHAR(255) NOT NULL,
    `password`  VARCHAR(255) NOT NULL,
    `role_id`   INT UNSIGNED NOT NULL,
    PRIMARY KEY (`user_id`),
    UNIQUE INDEX `user_username_unique` (`username` ASC),
    UNIQUE INDEX `user_email_unique` (`email` ASC),
    INDEX `fk_user_role1_idx` (`role_id` ASC),
    CONSTRAINT `fk_user_role1`
        FOREIGN KEY (`role_id`)
            REFERENCES `blog`.`role` (`role_id`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION
);


-- -----------------------------------------------------
-- Table `blog`.`category`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blog`.`category`;

CREATE TABLE IF NOT EXISTS `blog`.`category`
(
    `category_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
    `title`       VARCHAR(45)  NOT NULL,
    `slug`        VARCHAR(45)  NOT NULL,
    PRIMARY KEY (`category_id`),
    UNIQUE INDEX `title_UNIQUE` (`title` ASC),
    UNIQUE INDEX `slug_UNIQUE` (`slug` ASC)
);


-- -----------------------------------------------------
-- Table `blog`.`post`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blog`.`post`;

CREATE TABLE IF NOT EXISTS `blog`.`post`
(
    `post_id`              INT UNSIGNED NOT NULL AUTO_INCREMENT,
    `post_author`          INT UNSIGNED NOT NULL,
    `title`                VARCHAR(255) NOT NULL,
    `description`          TEXT         NOT NULL,
    `content`              TEXT         NOT NULL,
    `date`                 DATETIME     NOT NULL,
    `published`            TINYINT(1)   NOT NULL,
    `category_category_id` INT UNSIGNED NOT NULL,
    PRIMARY KEY (`post_id`, `category_category_id`),
    INDEX `post_post_author_foreign` (`post_author` ASC),
    INDEX `fk_post_category1_idx` (`category_category_id` ASC),
    CONSTRAINT `post_post_author_foreign`
        FOREIGN KEY (`post_author`)
            REFERENCES `blog`.`user` (`user_id`),
    CONSTRAINT `fk_post_category1`
        FOREIGN KEY (`category_category_id`)
            REFERENCES `blog`.`category` (`category_id`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION
);


-- -----------------------------------------------------
-- Table `blog`.`tag`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blog`.`tag`;

CREATE TABLE IF NOT EXISTS `blog`.`tag`
(
    `tag_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
    `title`  VARCHAR(45)  NOT NULL,
    `slug`   VARCHAR(45)  NOT NULL,
    PRIMARY KEY (`tag_id`),
    UNIQUE INDEX `slug_UNIQUE` (`slug` ASC),
    UNIQUE INDEX `title_UNIQUE` (`title` ASC)
)
    ENGINE = InnoDB
    ROW_FORMAT = COMPRESSED;


-- -----------------------------------------------------
-- Table `blog`.`comment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blog`.`comment`;

CREATE TABLE IF NOT EXISTS `blog`.`comment`
(
    `comment_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
    `parent_id`  INT UNSIGNED NOT NULL,
    `created_at` DATETIME     NOT NULL,
    `content`    TEXT         NOT NULL,
    `user_id`    INT UNSIGNED NOT NULL,
    PRIMARY KEY (`comment_id`),
    INDEX `comment_user_id_foreign` (`user_id` ASC),
    INDEX `comment_parent_id_foreign` (`parent_id` ASC),
    CONSTRAINT `comment_user_id_foreign`
        FOREIGN KEY (`user_id`)
            REFERENCES `blog`.`user` (`user_id`),
    CONSTRAINT `comment_parent_id_foreign`
        FOREIGN KEY (`parent_id`)
            REFERENCES `blog`.`comment` (`comment_id`)
);


-- -----------------------------------------------------
-- Table `blog`.`post_tag`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blog`.`post_tag`;

CREATE TABLE IF NOT EXISTS `blog`.`post_tag`
(
    `post_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
    `tag_id`  INT UNSIGNED NOT NULL,
    INDEX `post_tag_post_id_foreign` (`post_id` ASC),
    INDEX `post_tag_tag_id_foreign` (`tag_id` ASC),
    PRIMARY KEY (`post_id`, `tag_id`),
    CONSTRAINT `post_tag_post_id_foreign`
        FOREIGN KEY (`post_id`)
            REFERENCES `blog`.`post` (`post_id`),
    CONSTRAINT `post_tag_tag_id_foreign`
        FOREIGN KEY (`tag_id`)
            REFERENCES `blog`.`tag` (`tag_id`)
            ON DELETE CASCADE
            ON UPDATE CASCADE
);


SET SQL_MODE = @OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS = @OLD_UNIQUE_CHECKS;
